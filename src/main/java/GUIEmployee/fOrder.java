/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUIEmployee;

import ConnectionDB.ControlDB;
import ObjectsDB.Client;
import ObjectsDB.Product;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author user-ubunto
 */
public class fOrder extends javax.swing.JFrame {

    private TableRowSorter tableRowSorter;
    private TableRowSorter tableRowSorterClient;
    
    private DefaultTableModel dtmProduct;
    private DefaultTableModel dtmClient;
    private DefaultTableModel dtmProductSell;
    
    private ArrayList<Product> products;
    private ArrayList<Client> clients;
    private String IDProduct;
    private String IDClient;
    private double priceProduct;
    private int existence;
    private double totalToPay;
    private double creditClient;
    private double costPrepaid;
    private String codeStoreEnter;
    private ControlDB control;
    private Date dateActual;
    private String codeStoreOut;
    private String codeOrder;
    /**
     * Creates new form fOrder
     */
    public fOrder(ControlDB control1,String codeStoreEnter, Date dateActual) {
        initComponents();
        this.control = control1;
        this.codeStoreEnter = codeStoreEnter;
        this.dateActual = dateActual;
        
        dtmProduct = (DefaultTableModel) this.TableProduct.getModel();                
        dtmClient = (DefaultTableModel) this.TableClient.getModel();
        dtmProductSell = (DefaultTableModel) this.TableProductSell.getModel();
        
        this.priceProduct = 0;
        this.existence = 0;
        this.totalToPay = 0;
        this.IDClient = "";
        this.IDProduct = "";
        this.costPrepaid = 0;
        this.codeStoreOut = String.valueOf(this.jComboBox1.getSelectedItem());
        
        this.control.setCodeStoreCombobox(this.jComboBox1);
        this.codeStoreOut = String.valueOf(this.jComboBox1.getSelectedItem());
        this.products = this.control.setProductsByStore(this.codeStoreOut);
        this.clients = this.control.setClients();
        setProductsTable();
        setClients();
        
        
        
        
        setTextfieldNotEditables();
        verifySelectedCheckBox();
        reviewStoresComboBox();
        this.products = this.control.setProductsByStore(this.codeStoreOut);
        this.clients = this.control.setClients();
        setProductsTable();
        setClients();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel11 = new javax.swing.JLabel();
        ButtonPay = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        TextFieldCodeProduct = new javax.swing.JTextField();
        TextFieldQuantity = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        TableProduct = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        TextFieldFilter = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        TextFieldNameProduct = new javax.swing.JTextField();
        TextFieldTotalPay = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        TableProductSell = new javax.swing.JTable();
        jLabel18 = new javax.swing.JLabel();
        TextFieldTotal = new javax.swing.JTextField();
        ButtonAdd = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        TextFieldClientName = new javax.swing.JTextField();
        TextFieldClientCredit = new javax.swing.JTextField();
        TextFieldFilterClient = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        TableClient = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        jLabel14 = new javax.swing.JLabel();
        CheckBoxCash = new javax.swing.JCheckBox();
        CheckBoxCredit = new javax.swing.JCheckBox();
        jLabel15 = new javax.swing.JLabel();
        TextFieldPayCash = new javax.swing.JTextField();
        TextFieldPayCredit = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        TextFieldPrepaid = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        TextFieldCodeOrder = new javax.swing.JTextField();

        jLabel1.setText("jLabel1");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel2.setFont(new java.awt.Font("SansSerif", 0, 15)); // NOI18N
        jLabel2.setText("Tienda Origen");

        jComboBox1.setFont(new java.awt.Font("SansSerif", 0, 15)); // NOI18N
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(jComboBox1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel11.setFont(new java.awt.Font("SansSerif", 0, 15)); // NOI18N
        jLabel11.setText("Pago en credito");

        ButtonPay.setFont(new java.awt.Font("SansSerif", 0, 15)); // NOI18N
        ButtonPay.setText("Realizar Pedido");
        ButtonPay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonPayActionPerformed(evt);
            }
        });

        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        TextFieldCodeProduct.setFont(new java.awt.Font("SansSerif", 0, 15)); // NOI18N

        TextFieldQuantity.setFont(new java.awt.Font("SansSerif", 0, 15)); // NOI18N
        TextFieldQuantity.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                TextFieldQuantityFocusLost(evt);
            }
        });
        TextFieldQuantity.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TextFieldQuantityKeyTyped(evt);
            }
        });

        TableProduct.setFont(new java.awt.Font("SansSerif", 0, 15)); // NOI18N
        TableProduct.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Codigo", "Nombre", "Fabricante", "Existencia", "Precio", "Garantia"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        TableProduct.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TableProductMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(TableProduct);

        jLabel3.setFont(new java.awt.Font("SansSerif", 0, 15)); // NOI18N
        jLabel3.setText("Producto");

        jLabel4.setFont(new java.awt.Font("SansSerif", 0, 15)); // NOI18N
        jLabel4.setText("Filtrar");

        TextFieldFilter.setFont(new java.awt.Font("SansSerif", 0, 15)); // NOI18N
        TextFieldFilter.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TextFieldFilterKeyTyped(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("SansSerif", 0, 15)); // NOI18N
        jLabel5.setText("Nombre del Producto");

        jLabel6.setFont(new java.awt.Font("SansSerif", 0, 15)); // NOI18N
        jLabel6.setText("Codigo del Producto");

        jLabel7.setFont(new java.awt.Font("SansSerif", 0, 15)); // NOI18N
        jLabel7.setText("Cantidad");

        jLabel8.setFont(new java.awt.Font("SansSerif", 0, 15)); // NOI18N
        jLabel8.setText("Total a Pagar");

        TextFieldNameProduct.setFont(new java.awt.Font("SansSerif", 0, 15)); // NOI18N

        TextFieldTotalPay.setFont(new java.awt.Font("SansSerif", 0, 15)); // NOI18N

        jLabel17.setText("Productos Agregados");

        TableProductSell.setFont(new java.awt.Font("SansSerif", 0, 15)); // NOI18N
        TableProductSell.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Codigo", "Nombre", "Cantidad", "Precio", "Total"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(TableProductSell);

        jLabel18.setText("Total a Pagar");

        ButtonAdd.setText("Agregar");
        ButtonAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonAddActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(153, 153, 153)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(TextFieldFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 470, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 470, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(TextFieldNameProduct)
                            .addComponent(TextFieldCodeProduct)
                            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(26, 26, 26)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(TextFieldTotalPay, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel7)
                                    .addComponent(TextFieldQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(12, 12, 12)
                                .addComponent(ButtonAdd, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addComponent(jLabel17)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel18)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(TextFieldTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 287, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3)
                        .addComponent(jLabel4))
                    .addComponent(TextFieldFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(jLabel7))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(TextFieldQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(TextFieldNameProduct, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(ButtonAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(TextFieldCodeProduct, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TextFieldTotalPay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel17)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel18)
                    .addComponent(TextFieldTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel9.setFont(new java.awt.Font("SansSerif", 0, 15)); // NOI18N
        jLabel9.setText("Cliente");

        jLabel10.setFont(new java.awt.Font("SansSerif", 0, 15)); // NOI18N
        jLabel10.setText("Filtrar");

        jLabel12.setFont(new java.awt.Font("SansSerif", 0, 15)); // NOI18N
        jLabel12.setText("Nombre del Cliente");

        jLabel13.setFont(new java.awt.Font("SansSerif", 0, 15)); // NOI18N
        jLabel13.setText("Credito del Cliente");

        TextFieldClientName.setFont(new java.awt.Font("SansSerif", 0, 15)); // NOI18N

        TextFieldClientCredit.setFont(new java.awt.Font("SansSerif", 0, 15)); // NOI18N

        TextFieldFilterClient.setFont(new java.awt.Font("SansSerif", 0, 15)); // NOI18N
        TextFieldFilterClient.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TextFieldFilterClientKeyTyped(evt);
            }
        });

        TableClient.setFont(new java.awt.Font("SansSerif", 0, 15)); // NOI18N
        TableClient.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nombre", "NIT", "DPI", "Credito"
            }
        ));
        TableClient.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TableClientMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(TableClient);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel9)
                        .addGap(199, 199, 199)
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(TextFieldFilterClient, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel13)
                            .addComponent(jLabel12)
                            .addComponent(TextFieldClientName, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(TextFieldClientCredit, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(jLabel10)
                    .addComponent(TextFieldFilterClient, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(jLabel12)
                .addGap(5, 5, 5)
                .addComponent(TextFieldClientName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel13)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(TextFieldClientCredit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(25, Short.MAX_VALUE))
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel14.setFont(new java.awt.Font("SansSerif", 0, 15)); // NOI18N
        jLabel14.setText("Tipo de Pago");

        CheckBoxCash.setFont(new java.awt.Font("SansSerif", 0, 15)); // NOI18N
        CheckBoxCash.setText("Efectivo");
        CheckBoxCash.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CheckBoxCashActionPerformed(evt);
            }
        });

        CheckBoxCredit.setFont(new java.awt.Font("SansSerif", 0, 15)); // NOI18N
        CheckBoxCredit.setText("Credito");
        CheckBoxCredit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CheckBoxCreditActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel14)
                    .addComponent(CheckBoxCash)
                    .addComponent(CheckBoxCredit))
                .addContainerGap(23, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel14)
                .addGap(16, 16, 16)
                .addComponent(CheckBoxCash)
                .addGap(7, 7, 7)
                .addComponent(CheckBoxCredit)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel15.setFont(new java.awt.Font("SansSerif", 0, 15)); // NOI18N
        jLabel15.setText("Pago en efectivo");

        TextFieldPayCash.setFont(new java.awt.Font("SansSerif", 0, 15)); // NOI18N
        TextFieldPayCash.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TextFieldPayCashKeyTyped(evt);
            }
        });

        TextFieldPayCredit.setFont(new java.awt.Font("SansSerif", 0, 15)); // NOI18N
        TextFieldPayCredit.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TextFieldPayCreditKeyTyped(evt);
            }
        });

        jLabel16.setFont(new java.awt.Font("SansSerif", 0, 15)); // NOI18N
        jLabel16.setText("Pago minimo anticipado");

        TextFieldPrepaid.setFont(new java.awt.Font("SansSerif", 0, 15)); // NOI18N

        jLabel19.setText("Codigo del Pedido");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel15)
                            .addComponent(jLabel11)
                            .addComponent(TextFieldPayCash)
                            .addComponent(TextFieldPayCredit, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jLabel19)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(TextFieldCodeOrder, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 272, Short.MAX_VALUE)
                            .addComponent(jLabel16, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(TextFieldPrepaid, javax.swing.GroupLayout.Alignment.LEADING))
                        .addGap(18, 18, 18)
                        .addComponent(ButtonPay, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(29, 29, 29))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel19)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(TextFieldCodeOrder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel16)
                                .addGap(5, 5, 5)
                                .addComponent(TextFieldPrepaid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(ButtonPay, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(jLabel15)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(TextFieldPayCash, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(15, 15, 15))
                                    .addComponent(jLabel11, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(TextFieldPayCredit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(15, 15, 15))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ButtonPayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonPayActionPerformed
        validatePay();
    }//GEN-LAST:event_ButtonPayActionPerformed

    private void TextFieldQuantityFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TextFieldQuantityFocusLost
        validateTextFieldQuantity();
        if (this.TextFieldQuantity.getText().equals("")) {
            this.TextFieldTotalPay.setText("");
        }else{
            obtainTotalToPay();
        }
    }//GEN-LAST:event_TextFieldQuantityFocusLost

    private void TextFieldQuantityKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TextFieldQuantityKeyTyped
        validateOnlyNumbers(evt);
        validateQuantity(evt);
        validateZerosOnlyInRight();
    }//GEN-LAST:event_TextFieldQuantityKeyTyped

    private void TableProductMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TableProductMouseClicked
        resetTextFieldsAndCheckbox();
        int select = this.TableProduct.rowAtPoint(evt.getPoint());
        this.TextFieldCodeProduct.setText(String.valueOf(this.TableProduct.getValueAt(select,0)));
        this.TextFieldNameProduct.setText(String.valueOf(this.TableProduct.getValueAt(select,1)));

        this.IDProduct = this.TextFieldCodeProduct.getText();
        this.existence = Integer.parseInt(String.valueOf(this.TableProduct.getValueAt(select,3)));
        this.priceProduct = Double.parseDouble(String.valueOf(this.TableProduct.getValueAt(select,4)));
    }//GEN-LAST:event_TableProductMouseClicked

    private void TextFieldFilterKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TextFieldFilterKeyTyped

        /*This is the filter of the rows of the table that
        *contains the products, you can filter the column 0, 1 and 2
        */
        this.TextFieldFilter.addKeyListener(new KeyAdapter(){
            @Override
            public void keyReleased(KeyEvent ke){
                tableRowSorter.setRowFilter(RowFilter.regexFilter("(?i)"+TextFieldFilter.getText(), 0,1,2));
            }
        });

        tableRowSorter = new TableRowSorter(dtmProduct);
        this.TableProduct.setRowSorter(tableRowSorter);

    }//GEN-LAST:event_TextFieldFilterKeyTyped

    private void TextFieldFilterClientKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TextFieldFilterClientKeyTyped
        /*This is the filter of the rows of the table that
        *contains the Client, you can filter the column 0and 1
        */
        this.TextFieldFilterClient.addKeyListener(new KeyAdapter(){
            @Override
            public void keyReleased(KeyEvent ke){
                tableRowSorterClient.setRowFilter(RowFilter.regexFilter("(?i)"+TextFieldFilterClient.getText(), 0,1));
            }
        });

        tableRowSorterClient = new TableRowSorter(dtmClient);
        this.TableClient.setRowSorter(tableRowSorterClient);
    }//GEN-LAST:event_TextFieldFilterClientKeyTyped

    private void CheckBoxCashActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CheckBoxCashActionPerformed
        verifySelectedCheckBox();
    }//GEN-LAST:event_CheckBoxCashActionPerformed

    private void CheckBoxCreditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CheckBoxCreditActionPerformed
        verifySelectedCheckBox();
    }//GEN-LAST:event_CheckBoxCreditActionPerformed

    private void TextFieldPayCashKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TextFieldPayCashKeyTyped
        validateOnlyNumbers(evt);
    }//GEN-LAST:event_TextFieldPayCashKeyTyped

    private void TextFieldPayCreditKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TextFieldPayCreditKeyTyped
        validateOnlyNumbers(evt);
    }//GEN-LAST:event_TextFieldPayCreditKeyTyped

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        this.codeStoreOut = String.valueOf(this.jComboBox1.getSelectedItem());
        this.products = this.control.setProductsByStore(this.codeStoreOut);
        setProductsTable();
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void ButtonAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonAddActionPerformed
        addProduct();
    }//GEN-LAST:event_ButtonAddActionPerformed

    private void TableClientMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TableClientMouseClicked
        int select = this.TableClient.rowAtPoint(evt.getPoint());
        this.TextFieldClientName.setText(String.valueOf(this.TableClient.getValueAt(select,0)));
        this.TextFieldClientCredit.setText(String.valueOf(this.TableClient.getValueAt(select,3)));
        this.IDClient = String.valueOf(this.TableClient.getValueAt(select,1));
        try{
            this.creditClient = Double.parseDouble(this.TextFieldClientCredit.getText());
        }catch(NumberFormatException e){

        }
    }//GEN-LAST:event_TableClientMouseClicked
    
    private void reviewStoresComboBox(){
        int countStores = this.jComboBox1.getItemCount();
        for (int i = 0; i <  countStores; i++) {
            if (this.codeStoreEnter.equals(String.valueOf(this.jComboBox1.getItemAt(i)))) {
                this.jComboBox1.removeItemAt(i);
                i = 0;
                countStores = this.jComboBox1.getItemCount();
            }            
        }
    }
    
    /**
     * This method is used by textfields so that the user does 
     * not enter any character that is not a digit.
     *
     * @param evt
    */
    public void validateOnlyNumbers(java.awt.event.KeyEvent evt){
        char validate = evt.getKeyChar();
        if (Character.isDigit(validate) == false) {
            evt.consume();
        }        
    }
    
    private void setTextfieldNotEditables(){
        this.TextFieldNameProduct.setEditable(false);
        this.TextFieldCodeProduct.setEditable(false);
        this.TextFieldTotalPay.setEditable(false);
        this.TextFieldClientCredit.setEditable(false);
        this.TextFieldClientName.setEditable(false);
        this.TextFieldPrepaid.setEditable(false);
    }        
            
    private void validateQuantity(java.awt.event.KeyEvent evt){
        if (this.TextFieldQuantity.getText().length() > 0) {
            try{
                String quantityStr = (this.TextFieldQuantity.getText())+evt.getKeyChar();
                int quantity = Integer.parseInt(quantityStr);
                if (quantity > this.existence) { 
                    evt.consume();
                }
            }catch(NumberFormatException e){
                
            }            
        }
    }
    
    private void validateZerosOnlyInRight(){
        if (this.TextFieldQuantity.getText().length() > 0) {                        
            String quantityStr = (this.TextFieldQuantity.getText());
            String quantity1Char = String.valueOf(quantityStr.charAt(0));
            if (quantity1Char.equals("0")) {
                quantityStr = quantityStr.replace("0","");
                this.TextFieldQuantity.setText(quantityStr);
            }
        }
    }
    
    private void validateTextFieldQuantity(){        
        try{
            String quantityStr = (this.TextFieldQuantity.getText());
            int quantity = Integer.parseInt(quantityStr);
            if (quantity > this.existence) {
                this.TextFieldQuantity.setText("");            
            }
        }catch(NumberFormatException e){
                
        }  
    }
    
    private void obtainTotalToPay(){
        try{
            String quantityStr = (this.TextFieldQuantity.getText());
            int quantity = Integer.parseInt(quantityStr);
            double totalToPay = this.priceProduct * quantity;
            this.TextFieldTotalPay.setText(String.valueOf(totalToPay));
            //this.totalToPay = totalToPay;
            this.costPrepaid = this.totalToPay *25/100;
            this.TextFieldPrepaid.setText(String.valueOf(this.costPrepaid));            
        }catch(NumberFormatException e){
            
        }
    }
    
    private void verifySelectedCheckBox(){
        this.TextFieldPayCash.setEditable(false);
        this.TextFieldPayCredit.setEditable(false);
        if (this.CheckBoxCash.isSelected()){            
            if (this.CheckBoxCredit.isSelected()){
                this.TextFieldPayCash.setEditable(true);
                this.TextFieldPayCredit.setEditable(true);
                this.TextFieldPayCash.setText("");
                this.TextFieldPayCredit.setText("");
            }else{
                this.TextFieldPayCash.setText(String.valueOf(this.totalToPay));
            }
        }else{
            if (this.CheckBoxCredit.isSelected()){
                validateIsCredit();                               
            }else{
                this.TextFieldPayCash.setText("");
                this.TextFieldPayCredit.setText("");
            }
        }
        
        
    }
    
    private void validateIsCredit(){
        if (this.creditClient >= this.costPrepaid) {
            this.TextFieldPayCredit.setText(String.valueOf(this.costPrepaid));
        }else{
            //Enviar mensaje que no tiene suficiente credito
            this.CheckBoxCredit.setSelected(false);
        }
    }    
    
    private void resetTextFieldsAndCheckbox(){
        this.TextFieldQuantity.setText("");
        this.TextFieldTotalPay.setText("");
        this.TextFieldPayCash.setText("");
        this.TextFieldPayCredit.setText("");
        this.CheckBoxCash.setSelected(false);
        this.CheckBoxCredit.setSelected(false);
    }
    
    public void validatePay(){
        boolean isReadyToPay = false;
        boolean isCredit = false;
        if (this.CheckBoxCash.isSelected() && this.CheckBoxCredit.isSelected()) {
            int quantityCash = 0;
            int quantityCredit = 0;
            
            if (this.TextFieldPayCash.getText().length() == 0)
                quantityCash = 0;
            else
                quantityCash = Integer.parseInt(this.TextFieldPayCash.getText());
            
            if (this.TextFieldPayCredit.getText().length() == 0)
                quantityCredit = 0;
            else
                quantityCredit = Integer.parseInt(this.TextFieldPayCredit.getText());                                    
            
            if (quantityCredit <= this.creditClient) {
                if ((quantityCash+quantityCredit) == this.totalToPay) {
                    isReadyToPay = true;
                }
            }
        }else{
            isReadyToPay = validateParameters();
        }
        if (this.TextFieldCodeOrder.getText().equals("")) {
            isReadyToPay = false;
        }
        if (this.CheckBoxCash.isSelected()==false && this.CheckBoxCredit.isSelected() ==false) {
            isReadyToPay = false;
        }
        if (isReadyToPay) {
            if (this.CheckBoxCredit.isSelected())
                isCredit = true;
            
            this.codeOrder = this.TextFieldCodeOrder.getText();
            orderProducts(isCredit);
            System.out.println("Se puede pagar");
            System.out.println("El Id del producto es: " + this.IDProduct);
            System.out.println("El Id del Cliente es: " + this.IDClient);
            System.out.println("Tiene que pagar: " + this.totalToPay);
            //Envair a base pagar y descontartatatatata
            //Enviar mensaje de se pago correctamente
            //Reiniciar el frame
        }else{
            System.out.println("No se puede pagar");
        }
    }
    
    private boolean validateParameters(){
        boolean isReadyToPay = true;
        if (this.IDClient.equals("") || this.IDProduct.equals("") || this.totalToPay == 0) {
            isReadyToPay = false;
        }        
        return isReadyToPay;
    }
    
    public void setProductsTable(){
        cleanTableProducts();
        String code = "";
        String name = "";
        String maker = "";
        int quantity = 0;
        double price = 0;
        int guarantee = 0;
        
        int sizeProducts = this.products.size();
        for (int i = 0; i < sizeProducts; i++) {
            code = this.products.get(i).getCode();
            name = this.products.get(i).getName();
            maker = this.products.get(i).getMaker();
            quantity = this.products.get(i).getQuantity();
            price = this.products.get(i).getPrice();
            guarantee = this.products.get(i).getGuarantee();
                       
            this.dtmProduct.addRow(new Object[]{code, name, maker,quantity,price,guarantee});
        }                
        
        this.TableProduct.setModel(dtmProduct);
    }
    
    public void cleanTableProducts(){
        int filas=this.TableProduct.getRowCount();
        for (int i = 0;filas>i; i++) {
            this.dtmProduct.removeRow(0);
        }
    }
    
    public void setClients(){
        cleanTableClient();
        String NIT = "";
        String name = "";
        String phone = "";
        String DPI = "";
        double credit = 0;
        String email = "";
        String address = "";
        
        int sizeClients = this.clients.size();
        for (int i = 0; i < sizeClients; i++) {
            NIT = this.clients.get(i).getNIT();
            name = this.clients.get(i).getName();
            phone = this.clients.get(i).getPhone();
            DPI = this.clients.get(i).getDPI();
            credit = this.clients.get(i).getCredit();
            email = this.clients.get(i).getEmail();
            address = this.clients.get(i).getAddress();
                       
            this.dtmClient.addRow(new Object[]{name, NIT, DPI, credit, phone , email, address});
        }                
        
        this.TableClient.setModel(dtmClient);
    }
    
    public void cleanTableClient(){
        int filas=this.TableClient.getRowCount();
        for (int i = 0;filas>i; i++) {
            this.dtmClient.removeRow(0);
        }
    }
    
    public void addProduct(){
        String code = this.TextFieldCodeProduct.getText();
        String name = this.TextFieldNameProduct.getText();
        String quantity = this.TextFieldQuantity.getText();
        double price = this.priceProduct;
        double total;
        total = Double.parseDouble(this.TextFieldTotalPay.getText());
        this.totalToPay += total;
        this.dtmProductSell.addRow(new Object[]{code,name,quantity,price,total});
        this.TextFieldTotal.setText(String.valueOf(this.totalToPay));
        this.costPrepaid = this.totalToPay *25/100;
        this.TextFieldPrepaid.setText(String.valueOf(this.costPrepaid));  
    }
    
    public void orderProducts(boolean isCredit){
        
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        String dateStr = sdf.format(this.dateActual);
        //String code, String dateOrder, double total , double advance, String clientNit, int codeShippingTime ,String storeEnter, String storeOut, boolean delivered
        //this.control.insertOrder(dateStr, IDClient, totalToPay);
        int codeShippingStore = this.control.existRelationShippingTime(this.codeStoreOut,this.codeStoreEnter);
        this.control.insertOrder(this.codeOrder, dateStr, totalToPay, this.costPrepaid, IDClient, codeShippingStore, codeStoreOut, codeStoreEnter, false);
        
        String codeProduct = "";
            int quantity = 0;
            for (int i = 0; i < this.TableProductSell.getRowCount(); i++) {
                codeProduct = String.valueOf(this.TableProductSell.getValueAt(i,0));
                quantity = Integer.parseInt(String.valueOf(this.TableProductSell.getValueAt(i,2)));
                this.control.quitQuantityProduct(this.codeStoreOut, codeProduct, quantity);
                this.control.insertOrderProduct(quantity,this.codeOrder, codeProduct);
            }                        
        JOptionPane.showMessageDialog(null,"Se realizo correctamente el pedido");
        if (isCredit) {
            quitCredit();
        }
    }
    
    public void quitCredit(){
        double creditQuit = Double.parseDouble(this.TextFieldPayCredit.getText());
        this.control.quitCreditClient(IDClient, creditQuit);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ButtonAdd;
    private javax.swing.JButton ButtonPay;
    private javax.swing.JCheckBox CheckBoxCash;
    private javax.swing.JCheckBox CheckBoxCredit;
    private javax.swing.JTable TableClient;
    private javax.swing.JTable TableProduct;
    private javax.swing.JTable TableProductSell;
    private javax.swing.JTextField TextFieldClientCredit;
    private javax.swing.JTextField TextFieldClientName;
    private javax.swing.JTextField TextFieldCodeOrder;
    private javax.swing.JTextField TextFieldCodeProduct;
    private javax.swing.JTextField TextFieldFilter;
    private javax.swing.JTextField TextFieldFilterClient;
    private javax.swing.JTextField TextFieldNameProduct;
    private javax.swing.JTextField TextFieldPayCash;
    private javax.swing.JTextField TextFieldPayCredit;
    private javax.swing.JTextField TextFieldPrepaid;
    private javax.swing.JTextField TextFieldQuantity;
    private javax.swing.JTextField TextFieldTotal;
    private javax.swing.JTextField TextFieldTotalPay;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    // End of variables declaration//GEN-END:variables
}
